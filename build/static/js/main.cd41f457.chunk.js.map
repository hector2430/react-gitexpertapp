{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputVal","setInputval","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAChBC,mBAAS,IADO,mBACzCC,EADyC,KAC/BC,EAD+B,KAYhD,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAASK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAAwBO,OACtCN,EAAY,OAKZ,4CACA,2BAAOO,KAAK,OAAOC,MAAOT,EAAUU,SAbd,SAACP,GACzBF,EAAYE,EAAEQ,OAAOF,YCJZG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCLGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIGG,MAAMR,GAJT,cAIfS,EAJe,gBAKEA,EAAUC,OALZ,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXjB,kBAcdY,GAdc,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAdAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAChB,SAACC,GACCC,YAAW,WACTJ,EAAS,CACPT,KAAMY,EACNL,SAAS,MAEV,QAEL,CAACb,OAIEc,EDjB2BM,CAAapB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAEtB,OACE,oCACE,4BAAKb,GACJa,GAAW,uBAAGjB,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aACZc,EAAOF,KAAI,SAACC,GACX,OAAO,kBAAC,EAAD,eAAaY,IAAKZ,EAAIhB,IAAQgB,UETlCa,EAAe,WAAM,MAEI3C,mBAAS,CAAC,gBAFd,mBAEzB4C,EAFyB,KAEb7C,EAFa,KAIhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG6C,EAAWf,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASA,SAAUA,EAAUqB,IAAKrB,U,MCX5CwB,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.cd41f457.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputVal, setInputval] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    setInputval(e.target.value);\r\n  };\r\n  const handleSumbit = (e) => {\r\n    e.preventDefault();\r\n    if (inputVal.trim().length > 2) {\r\n      setCategories((cats) => [inputVal, ...cats]);\r\n      setInputval(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSumbit}>\r\n      <h2>Add Category</h2>\r\n      <input type=\"text\" value={inputVal} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=jPCgOoVcuJQRmwYOJpUO75qQG0FbLPP8`;\r\n  const respuesta = await fetch(url);\r\n  const { data } = await respuesta.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then(\r\n      (imgs) => {\r\n        setTimeout(() => {\r\n          setstate({\r\n            data: imgs,\r\n            loading: false,\r\n          });\r\n        }, 1500);\r\n      },\r\n      [category]\r\n    );\r\n  });\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\nexport const GifExpertApp = () => {\r\n  //const categories = [\"Dragon Ball\"];\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid category={category} key={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}